/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.7.1/userguide/custom_plugins.html
 */

plugins {
  // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
  id 'java-gradle-plugin'
  id 'checkstyle'
  id "com.github.spotbugs" version "4.6.0"
  id 'jacoco'
}

repositories {
  // Use JCenter for resolving dependencies.
  jcenter()
}

tasks.withType(JavaCompile) {
  options.compilerArgs.addAll(["--release", "8", "-Xlint:all", "-Werror"])
}

checkstyle {
  toolVersion = "8.38"
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
  reports {
    xml.enabled = true
    html.enabled = true
  }
}

dependencies {
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.7.0'
  testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.18.1'
  testImplementation group: 'commons-io', name: 'commons-io', version: '2.8.0'
}

gradlePlugin {
  // Define the plugin
  plugins {
    jacocoMd {
      id = 'com.github.sakata1222.jacoco-markdown'
      implementationClass = 'jp.gr.java_conf.spica.plugin.gradle.jacoco.JacocoMarkdownPlugin'
    }
  }
}

// Add a source set for the functional test suite
sourceSets {
  functionalTest {
  }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  it.useJUnitPlatform()
  it.finalizedBy jacocoTestReport
}

test {
  useJUnitPlatform()
  finalizedBy jacocoTestReport
}

jacocoTestReport {
  dependsOn test, functionalTest
  mustRunAfter test, functionalTest
}

tasks.named('check') {
  // Run the functional tests as part of `check`
  dependsOn(tasks.functionalTest)
}
